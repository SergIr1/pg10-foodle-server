{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Tasteorama API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "API documentation for Tasteorama backend"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:3000"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication and authorization endpoints"
    },
    {
      "name": "Users",
      "description": "Operations with users"
    },
    {
      "name": "Categories",
      "description": "Recipe categories"
    },
    {
      "name": "Ingredients",
      "description": "Recipe ingredients"
    },
    {
      "name": "Recipes",
      "description": "All about recipes"
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "description": "Create a new user account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "format": "name",
                    "example": "Serhii Karskyi"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "StrongPassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "User created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "example": "JWT_TOKEN"
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "email": {
                              "type": "string",
                              "example": "user@example.com"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "409": {
            "description": "Email already in use"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "operationId": "loginUser",
        "description": "Logs in a user and returns an access token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "test@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "12345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "token"
                  ],
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logs out a user and invalidates token",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out (No Content)"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh access token",
        "operationId": "refreshToken",
        "description": "Refresh a valid access token using a refresh token",
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "NEW_JWT_TOKEN"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/google-oauth-url": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Google OAuth URL",
        "operationId": "getGoogleOAuthUrl",
        "description": "Returns the Google OAuth 2.0 URL for redirection",
        "responses": {
          "200": {
            "description": "OAuth URL generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri",
                      "example": "https://accounts.google.com/o/oauth2/auth?..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "OAuth service unavailable or misconfigured",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Google OAuth configuration error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/confirm-oauth": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Confirm Google OAuth",
        "operationId": "confirmGoogleOAuth",
        "description": "Completes the Google OAuth flow and logs the user in",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "JWT_TOKEN"
                    },
                    "user": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get list of users",
        "operationId": "getUsers",
        "description": "Retrieve a list of all users",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "operationId": "getCurrentUser",
        "description": "Get information about the currently authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Current user retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by ID",
        "operationId": "getUserById",
        "description": "Retrieve information about a user by their ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "60b8d295f1d2ee3f88b5b6b1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "operationId": "getAllCategories",
        "description": "Returns a list of all recipe categories",
        "responses": {
          "200": {
            "description": "A list of categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "categories": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "60d21b4667d0d8992e610c85"
                          },
                          "name": {
                            "type": "string",
                            "example": "Dessert"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/ingredients": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Get all ingredients",
        "operationId": "getAllIngredients",
        "description": "Returns a list of all available ingredients",
        "responses": {
          "200": {
            "description": "A list of ingredients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ingredients": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "60d21b4967d0d8992e610c88"
                          },
                          "name": {
                            "type": "string",
                            "example": "Tomato"
                          },
                          "desc": {
                            "type": "string",
                            "example": "A red juicy fruit often used as a vegetable."
                          },
                          "img": {
                            "type": "string",
                            "format": "uri",
                            "example": "https://example.com/images/tomato.png"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/recipes": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get all recipes",
        "operationId": "getAllRecipes",
        "description": "Returns a list of all recipes, optionally filtered by title, category, or ingredients, with pagination and sorting",
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "description": "Filter by recipe title (partial match)"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by recipe category (exact match)"
          },
          {
            "in": "query",
            "name": "ingredient",
            "schema": {
              "type": "string",
              "format": "objectId"
            },
            "description": "Filter by ingredient ObjectId"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 12
            },
            "description": "Number of recipes per page"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "_id",
                "title",
                "category",
                "createdAt"
              ],
              "default": "_id"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Sort order (ascending or descending)"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of recipes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/recipe"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Create a new recipe",
        "operationId": "createRecipe",
        "description": "Create and return a new recipe",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "description",
                  "time",
                  "category",
                  "instructions",
                  "ingredients"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "maxLength": 64,
                    "example": "Spaghetti Bolognese"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 200,
                    "example": "Classic Italian pasta with meat sauce"
                  },
                  "time": {
                    "type": "string",
                    "example": "30 minutes"
                  },
                  "area": {
                    "type": "string",
                    "maxLength": 64,
                    "example": "Italian"
                  },
                  "category": {
                    "type": "string",
                    "example": "Dinner"
                  },
                  "instructions": {
                    "type": "string",
                    "maxLength": 1200,
                    "example": "Boil pasta. Cook meat with sauce. Mix together and serve."
                  },
                  "ingredients": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "measure"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "objectId",
                          "example": "60d0fe4f5311236168a109ca"
                        },
                        "measure": {
                          "type": "string",
                          "minLength": 2,
                          "maxLength": 16,
                          "example": "200g"
                        }
                      }
                    }
                  },
                  "thumb": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recipe created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "_id",
                    "title",
                    "description",
                    "time",
                    "category",
                    "instructions",
                    "ingredients",
                    "owner",
                    "createdAt",
                    "updatedAt"
                  ],
                  "properties": {
                    "_id": {
                      "type": "string",
                      "format": "objectId",
                      "example": "60d0fe4f5311236168a109ca"
                    },
                    "title": {
                      "type": "string",
                      "maxLength": 64,
                      "example": "Spaghetti Bolognese"
                    },
                    "description": {
                      "type": "string",
                      "maxLength": 200,
                      "example": "Classic Italian pasta with meat sauce"
                    },
                    "time": {
                      "type": "string",
                      "example": "30 minutes"
                    },
                    "area": {
                      "type": "string",
                      "example": "Italian"
                    },
                    "category": {
                      "type": "string",
                      "example": "Dinner"
                    },
                    "instructions": {
                      "type": "string",
                      "maxLength": 1200,
                      "example": "Boil pasta. Cook meat with sauce. Mix together and serve."
                    },
                    "ingredients": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "measure"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "objectId",
                            "example": "60d0fe4f5311236168a109cb"
                          },
                          "measure": {
                            "type": "string",
                            "example": "200g"
                          }
                        }
                      }
                    },
                    "owner": {
                      "type": "string",
                      "format": "objectId",
                      "example": "60d0fe4f5311236168a109ca"
                    },
                    "thumb": {
                      "type": "string",
                      "format": "binary"
                    },
                    "photo": {
                      "type": "string",
                      "format": "uri",
                      "example": "https://example.com/images/spaghetti.jpg"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-06-20T14:51:07.199+00:00",
                      "description": "Recipe created at"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-06-21T14:51:07.199+00:00",
                      "description": "Recipe last updated at"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Validation failed"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/recipes/favorite": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get favorite recipes",
        "operationId": "getFavoriteRecipes",
        "description": "Returns a list of recipes marked as favorite by the user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of favorite recipes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/recipe"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/recipes/own": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get user's own recipes",
        "operationId": "getOwnRecipes",
        "description": "Returns recipes created by the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of user's recipes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/recipe"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/recipes/{id}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get recipe by ID",
        "operationId": "getRecipeById",
        "description": "Returns a recipe by its unique ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recipe"
                }
              }
            }
          },
          "404": {
            "description": "Recipe not found"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Delete recipe by ID",
        "operationId": "deleteRecipeById",
        "description": "Deletes a recipe by its unique ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Recipe deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Recipe not found"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/recipes/{id}/favorite": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Add recipe to favorites",
        "operationId": "addRecipeToFavorites",
        "description": "Mark a recipe as favorite for the current user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe marked as favorite"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Recipe not found"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Remove recipe from favorites",
        "operationId": "removeRecipeFromFavorites",
        "description": "Unmark a recipe as favorite for the current user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe removed from favorites"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Recipe not found"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Invalid query parameter"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "createdAt",
          "updateAt"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "format": "objectId",
            "example": "60d0fe4f5311236168a109ca"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 16
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 128
          },
          "avatar": {
            "oneOf": [
              {
                "type": "string",
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "example": "https://example.com/avatar.jpg"
          },
          "followers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "objectId"
            }
          },
          "following": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "objectId"
            }
          },
          "favorites": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "objectId"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "User created at",
            "example": "2025-06-20T14:51:07.199+00:00"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Contact updated at",
            "example": "2025-06-21T14:51:07.199+00:00"
          }
        }
      },
      "recipeIngredient": {
        "type": "object",
        "required": [
          "id",
          "measure"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "objectId"
          },
          "measure": {
            "type": "string",
            "minLength": 2,
            "maxLength": 16
          }
        }
      },
      "recipe": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "description",
          "time",
          "category",
          "instructions",
          "ingredients",
          "owner"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "format": "objectId"
          },
          "title": {
            "type": "string",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "maxLength": 200
          },
          "time": {
            "type": "string"
          },
          "area": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "instructions": {
            "type": "string",
            "maxLength": 1200
          },
          "ingredients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/recipeIngredient"
            }
          },
          "owner": {
            "type": "string",
            "format": "objectId"
          },
          "thumb": {
            "type": "string",
            "format": "binary"
          },
          "photo": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/image.jpg"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Recipe created at",
            "example": "2025-06-20T14:51:07.199+00:00"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Recipe last updated at",
            "example": "2025-06-21T14:51:07.199+00:00"
          }
        }
      }
    }
  }
}